use std::str::FromStr;

use crate::ast::{
    literal::{Literal, parse_string_like}
};


grammar;


// =========================================== LITERALS ===========================================

pub Literal: Literal = {
    LiteralInt => Literal::Int(<>),
    LiteralFloat => Literal::Float(<>),
    LiteralBool => Literal::Bool(<>),
    LiteralString => Literal::String(<>),
    LiteralName => Literal::Name(<>)
}


LiteralInt: i32 = {
    r"[+-]?[0-9]+" => i32::from_str(<>).unwrap()
}

LiteralFloat: f32 = {
    <s:r"[+-]?[0-9]+\.[0-9]*"> "f"? => f32::from_str(s).unwrap()
}

LiteralBool: bool = {
    "true" => true,
    "false" => false
}

LiteralString: String = {
    r#""([^"'\\]|\\.)*""# => parse_string_like(<>)
}

LiteralName: String = {
    r#"'([^"'\\]|\\.)*'"# => parse_string_like(<>)
}


match {
    // Ignore C-style comments
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^\*]*[^/]*(\*/)[\n\r]*" => {},
} else {
    _
}