{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Witcher Script",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#modifiers"
		},
		{
			"include": "#special-vars"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#expressions"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.ws",
					"match": "\/\/.*"
				},
				{
					"name": "comment.block.ws",
					"begin": "/\\*",
    				"end": "\\*/"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ws",
					"match": "\\b(break|case|continue|delete|do|else|for|if|return|switch|while)\\b"
				},
				{
					"comment": "default keyword is treated as keyword.control only in switch conditionals",
					"match": "\\b(default)\\b\\s*:",
					"captures": {
						"1": {
							"name": "keyword.control.ws"
						}
					}
				},
				{
					"name": "keyword.other.ws",
					"match": "\\b(default|extends|import|hint|in|new|single)\\b"
				},
				{
					"name": "constant.language.ws",
					"match": "\\b(false|NULL|true)\\b"
				},
				{
					"name": "storage.type.ws",
					"match": "\\b(autobind|class|enum|event|function|state|struct|var)\\b"
				}
			]
		},
		"modifiers": {
			"patterns": [
				{
					"name": "storage.modifier.class.ws",
					"match": "\\b(abstract|statemachine)\\b"
				},
				{
					"name": "storage.modifier.function.ws",
					"match": "\\b(cleanup|entry|exec|final|latent|quest|reward|storyscene|timer)\\b"
				},
				{
					"name": "storage.modifier.var.ws",
					"match": "\\b(const|editable|inlined|optional|out|saved)\\b"
				},
				{
					"name": "storage.modifier.access.ws",
					"match": "\\b(private|protected|public)\\b"
				}
			]
		},
		"special-vars": {
			"patterns": [
				{
					"name": "variable.language.global.ws",
					"match": "\\b(theGame|theServer|thePlayer|theCamera|theUI|theSound|theDebug|theTimer|theInput)\\b"
				},
				{
					"name": "variable.language.object.ws",
					"match": "\\b(parent|super|this|virtual_parent)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.logic.ws",
					"match": "\\b(!|\\|\\||&&)\\b"
				},
				{
					"name": "keyword.operator.compare.ws",
					"match": "\\b(>|>=|<|<=|==|!=)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.ws",
					"match": "\\b(-|\\+|%|/|\\*)\\b"
				},
				{
					"name": "keyword.operator.bitwise.ws",
					"match": "\\b(~|\\||&)\\b"
				},
				{
					"name": "keyword.operator.assign.ws",
					"match": "\\b(=|\\+=|-=|\\*=|/=|%=)\\b"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"comment": "String literal",
					"name": "string.quoted.double.ws",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ws",
							"match": "\\\\\""
						}
					]
				},
				{
					"comment": "CName literal",
					"name": "string.quoted.single.ws",
					"begin": "'",
					"end": "'"
				},
				{
					"comment": "Numbers",
					"name": "constant.numeric.ws",
					"match": "\\b[0-9]+(\\.[0-9]*f?)?\\b"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"match": "(?<=(?:class|struct))\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "support.class.ws"
						}
					}
				},
				{
					"match": "(?<=state)\\s+(\\w+)\\s+(in)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "support.class.ws"
						},
						"2": {
							"name": "keyword.other.ws"
						},
						"3": {
							"name": "support.class.ws"
						}
					}
				},
				{
					"match": "(?<=extends)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "support.class.ws"
						}
					}
				},
				{
					"begin": "(?<=enum)\\s+(\\w+)\\s*",
					"beginCaptures": {
						"1": {
							"name": "support.class.ws"
						}
					},
					"end": "\\}",
					"patterns": [
						{
							"name": "variable.other.enummember.ws",
							"match": "\\b[a-zA-Z]\\w*\\b"
						},
						{
							"name": "constant.numeric.ws",
							"match": "\\b[0-9]+\\b"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "(?<=(?:function|event))\\s*(/\\*[^/]*\\*/)?\\s*(\\w+)\\s*",
					"beginCaptures": {
						"1": {
							"name": "comment.block.ws"
						},
						"2": {
							"name": "support.function.ws"
						}
					},
					"end": "\\)(\\s*:\\s*(\\w+)(\\s*<\\s*(\\w+)\\s*>\\s*)?)?",
					"endCaptures": {
						"2": {
							"name": "support.type.ws"
						},
						"4": {
							"name": "support.type.ws"
						}
					},
					"patterns": [
						{
							"include": "#modifiers"
						},
						{
							"include": "#comments"
						},
						{
							"begin": "(\\b\\w+\\b)",
							"beginCaptures": {
								"1": {
									"name": "variable.parameter.ws"
								}
							},
							"end": "\\s*:\\s*(\\w+)(?:\\s*<\\s*(\\w+)\\s*>\\s*)?",
							"endCaptures": {
								"1": {
									"name": "support.type.ws"
								},
								"2": {
									"name": "support.type.ws"
								}
							},
							"patterns": [
								{
									"name": "variable.parameter.ws",
									"match": "\\b\\w+\\b"
								},
								{
									"include": "#comments"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=(?:var|autobind)\\s+)",
					"end": "\\s*:\\s*(\\w+)(?:\\s*<\\s*(\\w+)\\s*>\\s*)?",
					"endCaptures": {
						"1": {
							"name": "support.type.ws"
						},
						"2": {
							"name": "support.type.ws"
						}
					},
					"patterns": [
						{
							"name": "variable.name.ws",
							"match": "\\b\\w+\\b"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"match": "(?<=(?:hint|default)\\s+)(\\w+)",
					"captures": {
						"1": {
							"name": "variable.name.ws"
						}
					}
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"comment": "instantiation",
					"match": "(?<=new)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "support.type.ws"
						}
					}
				},
				{
					"comment": "function call",
					"name": "support.function.ws",
					"match": "\\b(?=\\w+\\s*\\()\\w+\\b"
				},
				{
					"comment": "definitely, probably variables",
					"name": "support.variable.ws",
					"match": "\\b[a-z_]\\w*\\b"
				},
				{
					"comment": "likely constants, only words that have more than one character",
					"name": "variable.other.constant.ws",
					"match": "\\b[A-Z0-9_]{2,}\\b"
				},
				{
					"comment": "type cast, makes sure to check if it's a parenthesis after if, switch or while",
					"match": "(?=\\(\\s*\\b\\w+\\b\\s*\\)\\s*\\(?\\s*\\w+)(?<!if\\s*)(?<!switch\\s*)(?<!while\\s*)\\(\\s*\\b(\\w+)\\b\\s*\\)",
					"captures": {
						"1": {
							"name": "support.type.ws"
						}
					}
				},
				{
					"comment": "probably enum members",
					"name": "variable.other.enummember.ws",
					"match": "\\b[A-Z]+_\\w+\\b"
				},
				{
					"comment": "treat the rest as variables",
					"name": "support.variable.ws",
					"match": "\\b\\w+\\b"
				}
			]
		}
	},
	"scopeName": "source.ws"
}