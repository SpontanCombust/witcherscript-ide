{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>WIDE (WitcherScript Integrated Development Environment) is an unofficial Witcher 3 modding tooling aimed at improving developer experience by supplying them with powerful code analysis tools in the form of an editor extension.</p> <p>The goal is to provide a full set of features that the ScriptStudio offers and more while at the same time being open-source.</p> <p>WIDE includes an implementation of Language Server Protocol for the WitcherScript language - a proprietary scripting language used by award winning game Witcher 3 Wild Hunt created by CD Projekt RED.</p> <p>Sections:</p> <ul> <li>User Manual</li> <li>Developer Manual</li> <li>About</li> </ul>"},{"location":"dev-manual/","title":"Developer manual","text":"<p>Here you will find the information you need if you want to contribute to this project's creation or just want to compile the project yourself.</p>"},{"location":"dev-manual/#project-structure","title":"Project structure","text":"<ul> <li><code>.cargo</code> - Cargo configuration to enable xtasks</li> <li><code>.vscode</code> - VSCode specific files with debugging configurations </li> <li><code>crates</code> - Rust packages forming WIDE. The main crate is <code>lsp</code>, which contains language server implementation</li> <li><code>docs</code> - project documentation from which this website is built</li> <li><code>editors</code> - contains implementations of WitcherScript language client, currently just <code>vscode</code> client written in TypeScript</li> <li><code>media</code> - all sorts of visual assets used throughout the repository</li> <li><code>schemas</code> - contains <code>witcherscript.toml</code> schema</li> <li><code>xtask</code> - code for build commands to speed up development</li> </ul>"},{"location":"dev-manual/#building-the-project","title":"Building the project","text":"<p>You will need Rust with Cargo to build the server and node.js with npm to build the client.</p> <p>Project utilises the <code>xtask</code> convention of writing build scripts in Rust. To call a build script simply run <code>cargo xtask {command}</code> in the root project directory. You can run <code>cargo xtask --help</code> to see all the available commands and what they do.</p> <p>Currently available xtask commands:</p> <ul> <li><code>prep-server</code> - build and copy LSP server executable into VSCode's extension directory<ul> <li><code>--release</code> - should LSP be built with optimised release profile</li> <li><code>--target</code> - compilation target triple, e.g. x86_64-pc-windows-msvc</li> </ul> </li> <li><code>prep-client</code> - build VSCode client<ul> <li><code>--watch</code> - whether client should be continuously watched for changes made to it and rebuilt </li> <li><code>--fast</code> - whether client should be built instantly by skipping <code>npm ci</code> step</li> </ul> </li> <li><code>prep-rw3d</code> - download the Rusty Witcher 3 Debugger CLI needed by the client</li> <li><code>package</code> - build and package VSCode extension into a .vsix file<ul> <li><code>--out</code> - output path for the .vsix file; default is \"./witcherscript-ide.vsix\"</li> <li><code>--target</code> - VSCode extension target, e.g. win32-x64</li> <li><code>--pre-release</code> - mark the package as pre-release</li> </ul> </li> <li><code>install</code> - build, package and install the VSCode extension locally</li> </ul> <p>The usual procedure is as follows:</p> <ol> <li>Run <code>prep-server</code> whenever making changing to the LSP server. The executable cannot be updated during an active extension host session.</li> <li>Run <code>prep-client</code> whenever making changes to the VSCode client code. This can be done during extension host session, but changes can be observed only after extension reload.</li> <li>Run <code>prep-rw3d</code> when building the project for the first time or when the desired version of the tool changes.</li> <li>Run all the above when building the project for the first time.</li> </ol>"},{"location":"dev-manual/#debugging","title":"Debugging","text":"<p>Use VSCode to debug the client and server. The project provides launch configurations for both of them:</p> <ul> <li><code>Launch Client</code> - launches the extension host session of the client. Client needs to be built first!</li> <li><code>Attach to Server</code> - attaches to the currently running server process created by the client. You need the CodeLLDB extension for this.</li> </ul>"},{"location":"dev-manual/#building-docs","title":"Building docs","text":"<p>Documentation of the project is generated using MKDocs. To locally serve and test the website: 1. Make sure you have python3 with pip installed 2. Install MKDocs and dependencies <pre><code>pip install mkdocs\npip install mkdocs-material\n</code></pre> 3. Serve the website <pre><code>mkdocs serve\n</code></pre></p> <p>To learn more about MKDocs check out their website at https://www.mkdocs.org/.</p>"},{"location":"dev-manual/#contributing","title":"Contributing","text":"<p>Contributions to the project are welcome. First create an issue or a PR to discuss the change you want to make and ensure that it doesn't conflict with any future plans or core features. The active development branch is <code>dev</code>.</p> <p>You can access the project board conveniently detailing what has been done and future plans. The board does not contain everything though and some issues might just be annotated with TODO or FIXME comments. For this I highly recommend the Todo Tree extension.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#contact","title":"Contact","text":"<p>To contact me you can create an issue on this project's GitHub page, e-mail me directly at cedro_p@o2.pl or catch me in the Wolven Workshop Discord server.</p>"},{"location":"about/#notice-of-non-affiliation-and-disclaimer","title":"Notice of non-affiliation and disclaimer","text":"<p>Authors of <code>WIDE</code> project are not affiliated, associated, authorized, endorsed by, or in any way officially connected with CD Projekt RED, or any of its subsidiaries or its affiliates. The official CDPR website can be found at <code>https://www.cdprojektred.com</code>.</p> <p>Names <code>Witcher</code>, <code>Witcher Script</code> and other related names, marks, emblems and images are registered trademarks of their respective owners.</p>"},{"location":"user-manual/","title":"User Manual","text":"<p>Welcome to the User Manual. Here you fill find all sorts of useful information and instructions on how to use WitcherScript IDE.</p>"},{"location":"user-manual/#sections","title":"Sections","text":"<ul> <li>Getting Started - how to get the tool up and running</li> <li>Editor - showcase of extension capabilities,</li> <li>Project System - explanation on the project management system established by WIDE,</li> <li>Diagnostic Index - list of all diagnostics that WIDE can publish to the editor,</li> <li>FAQ - guide to common problems you may encounter,</li> <li>Changelog</li> </ul>"},{"location":"user-manual/#language-guide","title":"Language guide","text":"<p>Check out REDkit's official WitcherScript guide here: https://cdprojektred.atlassian.net/wiki/spaces/W3REDkit/pages/36306960/WitcherScript</p>"},{"location":"user-manual/#contributions","title":"Contributions","text":"<p>Questions, bug reports and feature requests can be submitted through GitHub's issues at https://github.com/SpontanCombust/witcherscript-ide/issues</p>"},{"location":"user-manual/changelog/","title":"Changelog","text":""},{"location":"user-manual/changelog/#changelog","title":"Changelog","text":""},{"location":"user-manual/changelog/#v040","title":"v0.4.0","text":"<p>UI/UX Improvements and more</p>"},{"location":"user-manual/changelog/#features","title":"Features","text":"<ul> <li>Added a welcome message that is shown when using the extension for the first time #47</li> <li>Added a message pointing to the changelog when the extension gets updated</li> <li>Added a short in-editor walkthrough for the extension #47</li> <li>Added a view container that houses all views added by the extension #45</li> <li>Added a \"Dashboard\" view that shows a list some of the main commands you can execute, so you don't have to look through the command palette #46</li> <li>Integrated the Rusty Witcher 3 Debugger CLI tool into the extension client #4</li> <li>Added \"Vanilla Scripts\" view. It displays the source tree of vanilla scripts (content0) and allows for peeking and importing vanilla scripts from the level of the view. #42</li> <li>Added \"Contents\" view. It displays script packages known to the content graph - its metadata and files it is associated with. When extension is active, but there are no script projects in the workspace it displays a welcome message with buttons for creating and initializing a project #22</li> <li>Added context menu items for comparing modded script with vanilla to file explorer and editor views</li> <li>Added context status bar item displaying name of the currently worked on script project. Clicking the item shows the command palette of all available WIDE commands #12</li> <li>Added work status bar item displaying the current background work being done on the language server. The item is hidden when there is no work being done currenly #12</li> <li>Added analysis for local var declaration placement</li> </ul>"},{"location":"user-manual/changelog/#fixes","title":"Fixes","text":"<ul> <li>Fixed contextual syntax analysis not working for events</li> </ul>"},{"location":"user-manual/changelog/#commands","title":"Commands","text":"<ul> <li>Added \"Open extension logs\" command</li> <li>Added \"Open extension settings\" command</li> <li>Added commands to launch the game</li> <li>Added \"Recompile game scripts\" command</li> <li>Added \"Execute console command\" command</li> </ul>"},{"location":"user-manual/changelog/#configuration","title":"Configuration","text":"<ul> <li>Added a setting to describe a prefered way of launching the game host for testing (standalone with debug args, REDkit, auto)</li> <li>Added a setting for the IP address of the game host</li> <li>Added a setting for the number of threads allocated to Rayon's parallel data processing</li> </ul>"},{"location":"user-manual/changelog/#other-changes","title":"Other changes","text":"<ul> <li>Error message after failing to import vanilla scripts now points to extension logs</li> </ul>"},{"location":"user-manual/changelog/#documentation","title":"Documentation","text":"<ul> <li>Added \"UI Elements\" section to the \"Editor\" page</li> <li>Updated some videos on the \"Editor\" to better reflect modern way of doing things in WIDE</li> <li>Renamed \"Editor\" page to \"Editor Features\"</li> <li>Added a disclaimer for using \"content0\" as the dependency for projects on the \"Project System\" page</li> <li>Moved the REDkit section closer to the beginning on the \"Project System\" page</li> <li>Rewrote \"Getting started\" page to point to and present the new built-in tutorial</li> </ul>"},{"location":"user-manual/changelog/#v032","title":"v0.3.2","text":"<p>Hotfix</p>"},{"location":"user-manual/changelog/#features_1","title":"Features","text":"<ul> <li>Added support for XOR binary operator</li> <li>Added support for BITAND assignment operator </li> <li>Added support for BITOR assignment operator </li> <li>Removed support for modulo assignment operator as it is not recognized by the compiler</li> </ul>"},{"location":"user-manual/changelog/#v031","title":"v0.3.1","text":"<p>Annotation support</p>"},{"location":"user-manual/changelog/#features_2","title":"Features","text":"<ul> <li>Added support for code annotations introduced Witcher 3 update <code>4.04a_REDkit_Update_2</code> on 06.06.2024</li> <li>Added more descriptive errors when adding improper specifiers in code (e.g. access modifier for struct fields)</li> </ul>"},{"location":"user-manual/changelog/#fixes_1","title":"Fixes","text":"<ul> <li>Established a specific order in which configuration settings get shown. They should no longer be listed in seemingly random order</li> <li>New projects now should get automatically detected when they get created inside the workspace</li> <li>Improved syntax highlighting of tooltips involving primitive types, special variables (e.g. <code>this</code>) and global variables (e.g. <code>thePlayer</code>)</li> <li>Fixed not being able to use \"Create/Initialize project\" commands when not already being in a workspace with existing script project(s)</li> </ul>"},{"location":"user-manual/changelog/#commands_1","title":"Commands","text":"<ul> <li>Added a debug command to inspect Concrete Syntax Tree of a script</li> </ul>"},{"location":"user-manual/changelog/#other-changes_1","title":"Other changes","text":"<ul> <li>Message shown when trying to access language features from the level of a non-project script will now direct to the main \"User manual\" page instead of \"Project System\" subpage</li> <li>Reorganized LSP server and client code for readability</li> </ul>"},{"location":"user-manual/changelog/#v030","title":"v0.3.0","text":"<p>Code symbols update</p> <p>With this release we also establish an acronym for the project, that being WIDE (WitcherScript Integrated Development Environment).  It is also finally getting some visual branding!</p>"},{"location":"user-manual/changelog/#features_3","title":"Features","text":"<ul> <li>Added Go to definition/declaration feature #13</li> <li>Added Hover tooltips feature #7</li> <li>Added Document Symbols feature #26</li> <li>Added Selection Range feature #27</li> <li>Added <code>witcherscript.toml</code> schema, which can be used by <code>Even Better TOML</code> extension if you have it installed #16</li> <li>Added multiple definition detection</li> <li>Added unique identifiers to diagnostics, which point to the documentation</li> </ul>"},{"location":"user-manual/changelog/#fixes_2","title":"Fixes","text":"<ul> <li>Fixed code text not synchronizing properly when saving a file</li> <li>Fixed unusual line endings in some vanilla script files causing parsing errors #31</li> <li>Fixed diagnostic for invalid project dependency path not being displayed</li> <li>Fixed scripts not getting updated if their version was rolled back (modified date was made older than the previous date)</li> <li>Fixed change to the script root path in the manifest file not getting detected and handled</li> <li>Disallowed contents to specify themselves as their own dependency</li> <li>Lessened the chance of the server getting deadlocked</li> </ul>"},{"location":"user-manual/changelog/#commands_2","title":"Commands","text":"<ul> <li>Added debug command \"Show script symbols\" to get a view of all symbols coming from current script file</li> <li>Added \"Clear global cache\" debug command, which clears global persistant data saved by the VSCode extension. Useful for testing by developers</li> </ul>"},{"location":"user-manual/changelog/#configuration_1","title":"Configuration","text":"<ul> <li>Added \"Enable debug features\" setting, which prevents debug features such as commands from being available if not enabled. By default this is disabled. #25</li> <li>Added a setting to enable or disable the language server, which allows you to disable everything except syntax highlighting if you want to #38</li> <li>Added a setting to enable or disable syntax analysis in the language server</li> </ul>"},{"location":"user-manual/changelog/#other-changes_2","title":"Other changes","text":"<ul> <li>Trying to access more than very basic features such as go to definition outside of a script project should now result in showing a warning message explaining as to why that can't be done. #33</li> <li>Added more possible automatic <code>scripts_root</code> subdirectory candidates for new projects #35</li> <li>Improved UX by explicitly displaying which window is vanilla and which is for the mod in script diff view</li> <li>Improved UX by automatically reacting to newly created, removed or renamed script files, some cases still require explicit file save to refresh though #39</li> <li>Added native content directory, which contains all symbols available in WitcherScript, but not explicitly declared. This directory is shipped together with the Language Server</li> <li>Improved AST traversal and text retrieval performance through better memory management</li> <li>Added issue templates to the repository</li> </ul>"},{"location":"user-manual/changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Added \"Diagnostic Index\" page detailing all diagnostics that can be appear in the editor #36</li> <li>Added FAQ page</li> <li>Added more demo media showing WIDE's capabilities</li> </ul>"},{"location":"user-manual/changelog/#v021","title":"v0.2.1","text":"<p>REDKit project support &amp; fixes</p>"},{"location":"user-manual/changelog/#features_4","title":"Features","text":"<ul> <li>Added support for REDKit projects</li> </ul>"},{"location":"user-manual/changelog/#fixes_3","title":"Fixes","text":"<ul> <li>Fixed script analysis not being reloaded when file was saved</li> <li>Fixed duplicated syntax errors for code inside functions</li> <li>Fixed <code>defaults</code> blocks not having syntax analysis</li> <li>Fixed diagnostics not displaying immediately when a manifest file was changed and saved</li> <li>Fixed content not being detected if it resided in the root of a repository directory</li> </ul>"},{"location":"user-manual/changelog/#documentation_2","title":"Documentation","text":"<ul> <li>Moved copyright information directly into the \"About\" page</li> <li>Made a dedicated page for \"Getting started\" which is available from the main page of user manual</li> <li>Updated \"Project System\" with REDKit project information</li> </ul>"},{"location":"user-manual/changelog/#other","title":"Other","text":"<ul> <li>Importing a script file now automatically opens it in the editor</li> <li>Opening a new/unknown manifest file now doesn't trigger content graph rebuild and a manual file save action is required to trigger it</li> <li>More descriptive errors diagnostics when linking content dependencies</li> <li>The extension now also gets published to Eclipse's Open VSX Registry at  https://open-vsx.org/extension/SpontanCombust/witcherscript-ide</li> </ul>"},{"location":"user-manual/changelog/#v020","title":"v0.2.0","text":"<p>Project system update</p>"},{"location":"user-manual/changelog/#features_5","title":"Features","text":"<ul> <li>Added a project system for WitcherScript, check the user manual for details</li> <li>Added workspace-wide analysis thanks to the project system</li> <li>Improved syntax highlighting </li> <li>Fixed syntactical analysis for more obscure grammar. The grammar used should now be 100% compatible with vanilla code</li> </ul>"},{"location":"user-manual/changelog/#commands_3","title":"Commands","text":"<ul> <li>Added a command to initialize a WitcherScript project in an existing directory</li> <li>Added a command to create a WitcherScript project in a new directory</li> <li>Added a command to import a vanilla script into the project</li> <li>Added a command to compare a script with the original vanilla counterpart</li> <li>(Debug) Added a command to inspect the AST of a script file</li> <li>(Debug) Added a command to inspect the dependency graph of projects in the workspace </li> </ul>"},{"location":"user-manual/changelog/#configuration_2","title":"Configuration","text":"<ul> <li>Added <code>witcherscript-ide.gameDirectory</code> setting</li> <li>Added <code>witcherscript-ide.contentRepositories</code> setting</li> </ul>"},{"location":"user-manual/changelog/#v010","title":"v0.1.0","text":"<p>Initial release</p>"},{"location":"user-manual/changelog/#editor","title":"Editor","text":"<ul> <li>Added syntax highlighting</li> <li>Added basic syntactical analysis</li> </ul>"},{"location":"user-manual/diagnostic-index/","title":"Diagnostic Index","text":""},{"location":"user-manual/diagnostic-index/#diagnostic-index","title":"Diagnostic index","text":""},{"location":"user-manual/diagnostic-index/#project-system","title":"Project System","text":""},{"location":"user-manual/diagnostic-index/#invalid-project-manifest","title":"<code>invalid-project-manifest</code>","text":"<p>Project manifest (<code>witcherscript.toml</code>) could not be parsed due to syntax error or missing properties.</p> witcherscript.toml<pre><code>[content] \nversion = \"1.0.0\"\nauthors = []\ngame_version = \"4.04\"\n# (1)\n\n[dependencies]\n</code></pre> <ol> <li>Missing field \"name\" in table [content].</li> </ol>"},{"location":"user-manual/diagnostic-index/#invalid-project-name","title":"<code>invalid-project-name</code>","text":"<p>The \"name\" field in <code>witcherscript.toml</code> manifest file is incorrect. The name must follow a specific format.</p> witcherscript.toml<pre><code>[content]\nname = \"modCo\u015bWi\u0119cej\" # (1)\n</code></pre> <ol> <li>Should not contain non-English characters. Use \"modCosWiecej\" instead.</li> </ol>"},{"location":"user-manual/diagnostic-index/#invalid-redkit-project-manifest","title":"<code>invalid-redkit-project-manifest</code>","text":"<p>REDkit project's <code>.w3edit</code> file could not be parsed. This could happen if you manually edited the <code>.w3edit</code> file that is created for a REDkit project. This file is edited automatically by the REDkit when needed and you shouldn't edit it yourself.</p> exampleMod.w3edit<pre><code>{ \n    \"name\": \"exampleMod\" // (1)\n    \"version\": \"1.0.0\",\n    \"gameVersion\": \"4.04\",\n</code></pre> <ol> <li>Syntax error, missing \",\".</li> </ol>"},{"location":"user-manual/diagnostic-index/#project-dependency-path-not-found","title":"<code>project-dependency-path-not-found</code>","text":"<p>Dependency in the <code>witcherscript.toml</code> manifest file could not be found at a specified path. This can happen if either a) the path does not exist or b) the path exists, but there is not script content there.</p> C:\\Modding\\modExample\\witcherscript.toml<pre><code>[dependencies]\nmodSharedUtils = { path = \"../modSharedUtils\" } # (1)\n</code></pre> <ol> <li>Path \"C:\\Modding\\modSharedUtils\" does not exist or does not contain any script content.</li> </ol>"},{"location":"user-manual/diagnostic-index/#project-dependency-name-not-found","title":"<code>project-dependency-name-not-found</code>","text":"<p>Dependency in the <code>witcherscript.toml</code> manifest file could not be found in any of the repositories. Make sure that the name of the dependency is correct. It should correspond to the name of the project or name of the directory if it's raw content.</p> witcherscript.toml<pre><code>[dependencies]\nmodSharedUtils = true # (1)\n</code></pre> <ol> <li>No content with name \"modSharedUtils\" could be found in any of the repositories.</li> </ol>"},{"location":"user-manual/diagnostic-index/#project-dependency-name-not-found-at-path","title":"<code>project-dependency-name-not-found-at-path</code>","text":"<p>Dependency in the <code>witcherscript.toml</code> manifest file was found at a given path, but the name key does not match with the \"name\" field in dependency's manifest.</p> witcherscript.toml<pre><code>[dependencies]\nmod_shared_utils = { path = \"../modSharedUtils\" } # (1)\n</code></pre> <ol> <li>Expected for example <code>modSharedUtils = { path = \"../modSharedUtils\" }</code></li> </ol>"},{"location":"user-manual/diagnostic-index/#project-self-dependency","title":"<code>project-self-dependency</code>","text":"<p>You've made content point to itself as its own dependency. Make sure to specify a correct path if it's a path dependency or remove the entry entirely if it's a repository dependency.</p> witcherscript.toml<pre><code>[content]\nname = \"helloWorld\"\n\n[dependencies]\nhelloWorld = { path = \".\" } # (1)\nhelloWorld = true # (2)\n</code></pre> <ol> <li>A path self-dependency</li> <li>This is an error if content itself is inside a repository</li> </ol>"},{"location":"user-manual/diagnostic-index/#multiple-matching-project-dependencies","title":"<code>multiple-matching-project-dependencies</code>","text":"<p>A repository dependency was found, but in multiple places. WIDE has no idea which one to choose. This can happen if you have added multiple repository paths in the configuration that share script content with the same name. A good example would be having two <code>content0</code> repository paths configured: one from game installation and other is from the 1.21 version of the game with commented code.</p> witcherscript.toml<pre><code>[dependencies]\ncontent0 = true # (1)\n</code></pre> <ol> <li>\"content0\" was found in game installation and some other, manually configured repository.</li> </ol> <p></p>"},{"location":"user-manual/diagnostic-index/#syntax-analysis","title":"Syntax Analysis","text":""},{"location":"user-manual/diagnostic-index/#missing-syntax","title":"<code>missing-syntax</code>","text":"<p>Some element of the WitcherScript syntax was missing.</p> <pre><code>latent function testLatent() {\n    while () { // (1)\n        Sleep(1);\n        break;\n    }\n}\n</code></pre> <ol> <li>Missing expression for <code>while</code>'s condition</li> </ol>"},{"location":"user-manual/diagnostic-index/#invalid-syntax","title":"<code>invalid-syntax</code>","text":"<p>Diagnostic used for all other syntax error cases. Syntactical analysis is very basic at the moment and can't communicate more complex cases. </p> <p></p>"},{"location":"user-manual/diagnostic-index/#contextual-syntax-analysis","title":"Contextual Syntax Analysis","text":""},{"location":"user-manual/diagnostic-index/#incompatible-specifier","title":"<code>incompatible-specifier</code>","text":"<p>Specifiers are keywords that tell the WitcherScript compiler to give a code symbol some additional properties. Different kinds of symbols can only take a predefined set of specifiers. A state for example cannot be at the same time a statemachine and thus it won't accept a <code>statemachine</code> specifier.</p> <pre><code>statemachine state Idle in Monster { // (1)\n    //...\n}\n</code></pre> <ol> <li>A state cannot be marked with <code>statemachine</code></li> </ol>"},{"location":"user-manual/diagnostic-index/#incompatible-function-flavour","title":"<code>incompatible-function-flavour</code>","text":"<p>Functions can additionally be marked with specifiers that you could call \"flavours\". They give them special attributes, like exposing them to the debug console if you add the <code>exec</code> keyword to the function. At most only one flavour can be specified. Some flavours can only be used in certain contexts, for example the aformentioned <code>exec</code> can only be used for global functions.</p> <pre><code>class CR4Player {\n    //...\n\n    public exec function LogHealth() { // (1)\n        LogChannel('Health', IntToString(this.GetHealth()));\n    }\n}\n</code></pre> <ol> <li><code>exec</code> cannot be used with a class method. Move the function to the global scope.</li> </ol>"},{"location":"user-manual/diagnostic-index/#repeated-specifier","title":"<code>repeated-specifier</code>","text":"<p>Repeating the same specifier for one code symbol is not allowed.</p> <pre><code>public saved public var piesEaten: int; // (1) \n</code></pre> <ol> <li>Repeated specifier <code>public</code> for field <code>piesEaten</code>.</li> </ol>"},{"location":"user-manual/diagnostic-index/#multiple-access-modifiers","title":"<code>multiple-access-modifiers</code>","text":"<p>Access modifiers are keywords that change the visibility of a field or method. This is a common feature in object oriented languages like WitcherScript.  Available access modifiers are <code>private</code>, <code>protected</code> and <code>public</code>. Only one of them can be used in the declaration.</p> <pre><code>protected public function MakeDinner() { // (1) \n    // ...\n} \n</code></pre> <ol> <li>Can't use both <code>protected</code> and <code>public</code> access modifiers. Use only one of these two.</li> </ol> <p>You can read more about access modifiers in programming languages here.</p>"},{"location":"user-manual/diagnostic-index/#invalid-annotation","title":"<code>invalid-annotation</code>","text":"<p>Detected a use of an unknown annotation. See the official WitcherScript guide for REDkit to know which annotations are avaialble.</p> <pre><code>@addFunction(CR4Player) // (1)\nfunction MountDragon(force: bool) {\n    // ...\n}\n</code></pre> <ol> <li>Used unknown <code>@addFunction</code> annotation. Did you mean <code>@addMethod</code>?</li> </ol>"},{"location":"user-manual/diagnostic-index/#invalid-annotation-placement","title":"<code>invalid-annotation-placement</code>","text":"<p>Annotations can only be used in the global context. Using them inside classes for example is erroneous.</p> <pre><code>class Cannon {\n    @addField(Ship) // (1)\n    public var ammunition: int;\n    // ...\n}\n</code></pre> <ol> <li>Using annotations inside classes is invalid. Add the field outside of the class definition.</li> </ol>"},{"location":"user-manual/diagnostic-index/#missing-annotation-argument","title":"<code>missing-annotation-argument</code>","text":"<p>Some annotations require an argument. For example the <code>@wrapMethod</code> annotation requires a type argument that will decide which class's method will be wrapped.</p> <pre><code>@wrapMethod // (1)\nfunction OnSpawned() {\n    // ...\n}\n</code></pre> <ol> <li>Missing class name</li> </ol>"},{"location":"user-manual/diagnostic-index/#incompatible-annotation","title":"<code>incompatible-annotation</code>","text":"<p>Annotations expect a specific code fragment below.</p> <pre><code>@addField(CR4Player) // (1)\nfunction SetE3Hairstyle() {\n    // ...\n}\n</code></pre> <ol> <li><code>@addField</code> annotation expects a var declaration.</li> </ol>"},{"location":"user-manual/diagnostic-index/#global-scope-var-decl","title":"<code>global-scope-var-decl</code>","text":"<p>WitcherScript does not support global variable declarations. The only context when it is valid is after the <code>@addField</code> annotation.</p> <pre><code>class Mod1 {\n    // ...\n}\n\nclass Mod2 {\n    // ...\n}\n\n\nvar modsInstalled: int; // (1)\n</code></pre> <ol> <li>Variable declaration not allowed here.</li> </ol>"},{"location":"user-manual/diagnostic-index/#invalid-local-var-placement","title":"<code>invalid-local-var-placement</code>","text":"<p>The WitcherScript compiler is not very flexible when it comes to local variable declarations. You are forced to declare all of them at the start of a function before doing anything else, even when it comes to such trivial cases like for loop iterator. This is similar to early C language standards, where declarations could only be done at the beginning of a scope.</p> <pre><code>function LogHeldSwordInCombat() {\n    if (thePlayer.IsInCombatState()) {\n        var id: SItemUniqueId; // (1)\n        id = thePlayer.inv.GetCurrentlyHeldSword();\n        LogChannel('TEST', \"Sword item name: \" + thePlayer.inv.GetItemName(id));\n    }\n}\n</code></pre> <ol> <li>Variable must be done before the \"if\" statement.</li> </ol> <p></p>"},{"location":"user-manual/diagnostic-index/#symbol-analysis","title":"Symbol Analysis","text":""},{"location":"user-manual/diagnostic-index/#symbol-name-taken","title":"<code>symbol-name-taken</code>","text":"<p>A code symbol (type, function, etc.) has been defined multiple types with the same name inside a content.</p> <pre><code>function doFoo() {\n    // ...\n}\n\nfunction doBar() {\n    // ...\n}\n\nfunction doFoo(a: int) { // (1)\n    // ...\n}\n</code></pre> <ol> <li>Global function \"doFoo\" has already been defined on line 1. Function overloading is not available in WitcherScript.</li> </ol> <p>Some contexts allow the same name to be used again. An example would be a class method having the same name as a global function. In that case if you were to use a function of that name within class's body, WitcherScript compiler would pick the function defined within the class.</p> <pre><code>function doFoo(a: int, b: string) {\n    // ...\n}\n\nclass MyClass {\n    function doFoo(s: string) {\n        // ...\n    }\n\n    function testFoo() {\n        doFoo(\"Hello\"); // (1)\n    }\n}\n</code></pre> <ol> <li>Compiler parses code without errors and picks the function defined within the class even if it has the same name as the global function from line 1.</li> </ol>"},{"location":"user-manual/diagnostic-index/#missing-type-arg","title":"<code>missing-type-arg</code>","text":"<p>WitcherScript does not offer a way to create your own generic types. It does however have syntax of using them akin to languages like C++ and Java. There to instantiate a variable of a generic type you would write <code>List&lt;int&gt; myList</code>, where <code>List</code> is the generic type and <code>int</code> is the type argument placed between angled brackets.  </p> <p>The only type in WitcherScript with properties of a generic type is the <code>array</code> type, which takes one type argument. Not supplying that type argument is an error.</p> <pre><code>var intArray: array; // (1)\n</code></pre> <ol> <li><code>array</code> requires a type argument, like <code>&lt;int&gt;</code>. So you should write <code>array&lt;int&gt;</code>.</li> </ol> <p>CDPR probably originally intended to be able to create your own generic types, but they ran out of time. That's because it would be easier to distinguish array-like types using square brackets (e.g. <code>[int]</code> or <code>int[]</code>) or something similar instead of having to reserve the <code>array</code> identifier just for this purpose.</p>"},{"location":"user-manual/diagnostic-index/#unnecessary-type-arg","title":"<code>unnecessary-type-arg</code>","text":"<p>The only type in WitcherScript with properties of a generic type is the <code>array</code> type. No other types can take any type arguments.  </p> <p>Also see missing-type-arg.</p> <pre><code>var player: CR4Player&lt;Ciri&gt;; // (1)\n</code></pre> <ol> <li>Class <code>CR4Player</code> does not take any type arguments. Remove <code>&lt;Ciri&gt;</code>.</li> </ol>"},{"location":"user-manual/diagnostic-index/#same-content-annotation","title":"<code>same-content-annotation</code>","text":"<p>Annotations are meant to extend types already existing in the Witcher 3 script code base or types defined in other mods. Even if it may be possible to <code>@wrapMethod</code> that is defined in the same mod WIDE discourages this behaviour in favour of simply editing those types instead of using annotations. </p> modSkillFramework/content/scripts/skill_framework.ws<pre><code>class SkillFramework {\n    public function DefineSkill(skillName: name) {\n        // ...\n    }\n}\n</code></pre> <pre><code>@wrapMethod(SkillFramework)\nfunction DefineSkill(skillName: name) { // (1)\n    LogChannel('SF', \"Skill defined: \" + skillName);\n    wrappedMethod(skillName);\n}\n</code></pre> <ol> <li>Putting this in the same mod will work for the script compiler, but will yield undefined behaviour for WIDE.</li> </ol> <p></p>"},{"location":"user-manual/diagnostic-index/#workspace-symbol-analysis","title":"Workspace Symbol Analysis","text":""},{"location":"user-manual/diagnostic-index/#symbol-name-taken-in-dependency","title":"<code>symbol-name-taken-in-dependency</code>","text":"<p>A code symbol (type, function, etc.) has already been defined in a content that is a dependency to this content.</p> content0/scripts/game/player/playerCheats.ws<pre><code>exec function RestoreStamina( optional val : int )\n{   \n    // ...\n}\n</code></pre> modFoodStamina/scripts/local/staminaManager.ws<pre><code>// ...\n\nfunction RestoreStamina() // (1)\n{   \n    // ...\n}\n</code></pre> <ol> <li>Global function \"RestoreStamina\" has already been defined in content \"content0\"</li> </ol> <p>See also <code>symbol-name-taken</code>.</p>"},{"location":"user-manual/editor/","title":"Editor Features","text":""},{"location":"user-manual/editor/#ui-elements","title":"UI Elements","text":""},{"location":"user-manual/editor/#dashboard-view","title":"Dashboard View","text":"<p>The primary view is the dashboard, which lets among other things create a script project and recompile game's scripts.</p> <p></p>"},{"location":"user-manual/editor/#vanilla-scripts-view","title":"Vanilla Scripts View","text":"<p>This view lets you see all available vanilla script files that you can import/checkout into your project.</p> <p></p>"},{"location":"user-manual/editor/#contents-view","title":"Contents View","text":"<p>Script \"contents\" or \"packages\" are seperate units of code that WIDE can recognize. These include custom WIDE projects, REDkit projects and raw Mod directories. You can learn more about the project system that WIDE uses here.</p> <p></p>"},{"location":"user-manual/editor/#status-bar","title":"Status Bar","text":"<p>Status bar displays context information about the last worked on project and any processes that might be going on currently in the background.</p> <p></p> <p></p>"},{"location":"user-manual/editor/#features","title":"Features","text":""},{"location":"user-manual/editor/#creating-and-initializing-script-projects","title":"Creating and initializing script projects","text":"<p> Loading REDkit projects is also natively supported with some prior requirements outlined here.</p>"},{"location":"user-manual/editor/#syntax-highlighting","title":"Syntax highlighting","text":""},{"location":"user-manual/editor/#basic-syntax-analysis","title":"Basic syntax analysis","text":""},{"location":"user-manual/editor/#importing-and-comparing-scripts-with-their-vanilla-counterparts","title":"Importing and comparing scripts with their vanilla counterparts","text":""},{"location":"user-manual/editor/#hover-tooltips","title":"Hover tooltips","text":""},{"location":"user-manual/editor/#go-to-definitiondeclaration","title":"Go to definition/declaration","text":"<p>More coming soon!</p> <p></p>"},{"location":"user-manual/editor/#command-palette","title":"Command palette","text":""},{"location":"user-manual/editor/#witcherscript-ideprojectsinit","title":"<code>witcherscript-ide.projects.init</code>","text":"<p>\"Initialize a WitcherScript project in existing directory...\" Will establish a basic file structure of a WitcherScript project in a given existing directory. Initial name of the project is picked based upon the directory name.</p>"},{"location":"user-manual/editor/#witcherscript-ideprojectscreate","title":"<code>witcherscript-ide.projects.create</code>","text":"<p>\"Create a new WitcherScript project...\" Will create a new directory and establish a basic file structure of a WitcherScript project inside it.</p>"},{"location":"user-manual/editor/#witcherscript-idescriptsimportvanilla","title":"<code>witcherscript-ide.scripts.importVanilla</code>","text":"<p>\"Import scripts from vanilla into project...\" Invokes a file chooser to pick vanilla scripts you want to import into your project. If more than one WitcherScript project exists in the workspace, prompts the user to choose the project. Command requires that the <code>content0</code> content is known and is a dependency to a given project.</p>"},{"location":"user-manual/editor/#witcherscript-idescriptsdiffvanilla","title":"<code>witcherscript-ide.scripts.diffVanilla</code>","text":"<p>\"Compare script with vanilla counterpart\" Shows a difference view between the original vanilla script and the imported, modified script in the project.</p>"},{"location":"user-manual/editor/#witcherscript-idegamelaunchdx12","title":"<code>witcherscript-ide.game.launchDx12</code>","text":"<p>\"Launch the game (DX12)\" Launches the DirectX12 version of the game.</p>"},{"location":"user-manual/editor/#witcherscript-idegamelaunchdx12debug","title":"<code>witcherscript-ide.game.launchDx12Debug</code>","text":"<p>\"Launch the game for debugging (DX12)\" Launches the DirectX12 version of the game with arguments to enable debugging it.</p>"},{"location":"user-manual/editor/#witcherscript-idegamelaunchdx11","title":"<code>witcherscript-ide.game.launchDx11</code>","text":"<p>\"Launch the game (DX11)\" Launches the DirectX11 version of the game.</p>"},{"location":"user-manual/editor/#witcherscript-idegamelaunchdx11debug","title":"<code>witcherscript-ide.game.launchDx11Debug</code>","text":"<p>\"Launch the game for debugging (DX11)\" Launches the DirectX11 version of the game with arguments to enable debugging it.</p>"},{"location":"user-manual/editor/#witcherscript-idegamerecompilescripts","title":"<code>witcherscript-ide.game.recompileScripts</code>","text":"<p>\"Recompile game scripts\" Remotely connects to the game to trigger script recompilation.</p>"},{"location":"user-manual/editor/#witcherscript-idegameexecconsolecommand","title":"<code>witcherscript-ide.game.execConsoleCommand</code>","text":"<p>\"Execute console command\" Remotely connects to the game to execute a command that would normally be entered in the debug console.</p>"},{"location":"user-manual/editor/#witcherscript-idemiscopenlogs","title":"<code>witcherscript-ide.misc.openLogs</code>","text":"<p>\"Open extension logs\" Open WIDE's language client output view.</p>"},{"location":"user-manual/editor/#witcherscript-idemiscopensettings","title":"<code>witcherscript-ide.misc.openSettings</code>","text":"<p>\"Open extension settings\" Open the settings page on WIDE's section.</p>"},{"location":"user-manual/editor/#witcherscript-idedebugshowscriptast","title":"<code>witcherscript-ide.debug.showScriptAst</code>","text":"<p>\"Show script AST\" Shows the Abstract Syntax Tree  of the currently focused on script as it is uderstood by the language server. Warning: if document's identation is done with tabs instead of spaces it may not show accurate symbol span data. Requires debug features to be enabled.</p>"},{"location":"user-manual/editor/#witcherscript-idedebugshowscriptcst","title":"<code>witcherscript-ide.debug.showScriptCst</code>","text":"<p>\"Show script CST\" Shows the Concrete Syntax Tree  of the currently focused on script as it is uderstood by the language server. Warning: if document's identation is done with tabs instead of spaces it may not show accurate symbol span data. Requires debug features to be enabled.</p>"},{"location":"user-manual/editor/#witcherscript-idedebugcontentgraphdot","title":"<code>witcherscript-ide.debug.contentGraphDot</code>","text":"<p>\"Show content graph\" Shows the graph in Graphviz .dot format representing the overall content dependency graph of the workspace. Requires debug features to be enabled.</p>"},{"location":"user-manual/editor/#witcherscript-idedebugshowscriptsymbols","title":"<code>witcherscript-ide.debug.showScriptSymbols</code>","text":"<p>\"Show script symbols\" Shows code symbols that have been extracted from the currently focused on script file. Requires debug features to be enabled.</p>"},{"location":"user-manual/editor/#witcherscript-idedebugclearglobalstate","title":"<code>witcherscript-ide.debug.clearGlobalState</code>","text":"<p>\"Clear global persistent data\" Clears global VSCode extension database entries created by the client. Useful mostly for testing. Requires debug features to be enabled.</p> <p></p>"},{"location":"user-manual/editor/#configuration","title":"Configuration","text":""},{"location":"user-manual/editor/#witcherscript-idegamedirectory","title":"<code>witcherscript-ide.gameDirectory</code>","text":"<p>Path to Witcher 3's root game directory (containing bin, content, Mods folders etc.). This will effectively add <code>content</code> and <code>Mods</code> folders to content repositories.</p>"},{"location":"user-manual/editor/#witcherscript-idecontentrepositories","title":"<code>witcherscript-ide.contentRepositories</code>","text":"<p>Paths to custom directories containing WitcherScript contents. Useful when not having Witcher 3 installed on your local machine or when simply storing scripts outside of game directory.</p>"},{"location":"user-manual/editor/#witcherscript-idegamehosttype","title":"<code>witcherscript-ide.gameHost.type</code>","text":"<p>What is the method you use to launch and mod the game. Affects remote commands in the dashboard view. Possible values:</p> <ul> <li>editor - the game launched through the REDkit modding tool,</li> <li>standalone - the game launched on its own with debug arguments,</li> <li>auto - the method gets automatically detected</li> </ul>"},{"location":"user-manual/editor/#witcherscript-idegamehostipaddress","title":"<code>witcherscript-ide.gameHost.ipAddress</code>","text":"<p>IPv4 address of the game host. It is used when running remote game commands such as script recompilation. Change this if you're running the game on a different computer from the one you're currently working in VSCode. Defaults to the localhost address.</p>"},{"location":"user-manual/editor/#witcherscript-idelanguageserverenable","title":"<code>witcherscript-ide.languageServer.enable</code>","text":"<p>Enable the language server. True by default.  You can disable this if you only want syntax highlighting. Change requires extension reload.</p>"},{"location":"user-manual/editor/#witcherscript-idelanguageserversyntaxanalysis","title":"<code>witcherscript-ide.languageServer.syntaxAnalysis</code>","text":"<p>Enable syntax analysis in the language server. True by default. This may require window reload if there are unresolved syntax analysis related diagnostics present.</p>"},{"location":"user-manual/editor/#witcherscript-idelanguageserverrayonthreads","title":"<code>witcherscript-ide.languageServer.rayonThreads</code>","text":"<p>Number of threads allocated to parallel data computation. Leave at 0 for automatic configuration. Change requires extension reload.</p>"},{"location":"user-manual/editor/#witcherscript-idedebugenabledebugfeatures","title":"<code>witcherscript-ide.debug.enableDebugFeatures</code>","text":"<p>Enables debug features used for development. False by default. Change requires extension reload.</p>"},{"location":"user-manual/faq/","title":"Frequently Asked Questions","text":"<p>Creating/renaming scripts in the editor doesn't get detected.</p> <p>When in doubt explicitly save the file using <code>Ctrl + S</code>. This should refresh source trees. This is especially true in case of changes to folders.</p> <p>Does WIDE support symbolic links (symlinks)?</p> <p>WIDE at the moment does not offer support for directories and files stored as symbolic links.</p>"},{"location":"user-manual/getting-started/","title":"Getting started","text":"<p>Install the extension from the Visual Studio marketplace or Open VSX if you're using other VSCode variants. You can also grab a .vsix file directly from the releases page.</p> <p>WIDE's VSCode extension comes with a quick walkthrough that will guide you through necessary steps to make it work. If you can't find the walkthrough use the command <code>\"Welcome: Open Walkthrough...\"</code> in the command palette and search for WitcherScript IDE.</p>"},{"location":"user-manual/project-system/","title":"Project System","text":"<p>The game during script compilation needs to think only about assembling one big blob of code that will be then compiled. Places where it looks for said code are predefined and limited. Aside from the testing stage, developing a script mod often means working in a completely unrelated workspace directory, which can additionally be stored remotely using a version control system like Git. WIDE bridges the gap between those workspaces and scripts in the game directory by introducing a project system. </p> <p>The project system does not affect the process of packaging and installing mods to the game. For now that is left to the developer to figure out for themselves, this includes any dependencies that the mod may need. You can either write your own batch scripts or use REDkit built-in packaging functionality.</p> <p>Projects organize WitcherScript code into seperable packages which can link with each other. Recognized content structures are:</p> <ul> <li>Redkit projects</li> <li>WIDE projects</li> <li>Raw content directories</li> </ul>"},{"location":"user-manual/project-system/#redkit-project","title":"REDKit project","text":"<p>WitcherScript IDE is able to detect projects created using the REDKit modding tool. These projects contain a <code>.w3edit</code>, which acts as a solution file for the whole project. Working with REDKit projects requires you to set the path to the game in extension's settings.</p> <p>REDKit project naturally can't use any scripts that are not part of it or the vanilla game (content0) unless you manually edit the depot. Until REDkit will be able to support script dependencies more easily if you want to get code suggestions from other mods consider initializing WIDE project in the workspace directory and filling the <code>[dependencies]</code> table.</p> <p> If both <code>*.w3edit</code> and <code>witcherscript.toml</code> are present in the directory, it will be treated as a WIDE project.</p>"},{"location":"user-manual/project-system/#wide-project","title":"WIDE Project","text":"<p>The WitcherScript project format that WIDE establishes is comprised of two things: a manifest file and a scripts directory.  The manifest is a TOML file by convention called <code>witcherscript.toml</code>. It contains basic information about the project like its name and what are its dependencies.  The scripts directory is a subfolder literally called \"scripts\", which contains all of project's WitcherScript files. The location of that folder can be configured in the manifest.</p> <p>Creating a manifest for your script mod is mandatory if you want to use more advanced code features like go to definition. Without a manifest you are limited to syntax highlighting and basic syntax analysis.</p> <p> To quickly create a new project or initialize one in an existing project directory use <code>\"Initialize/Create WitcherScript project...\"</code> commands from the dashboard view.</p> <p>Example of a simple WIDE project setup:</p> <pre><code>SuperSpeedMod/\n\u251c\u2500 witcherscript.toml\n\u251c\u2500 scripts/\n    \u251c\u2500 game/\n    \u2502  \u251c\u2500 r4Player.ws\n    \u251c\u2500 local/\n        \u251c\u2500 super_speed.ws\n</code></pre> SuperSpeedMod/witcherscript.toml<pre><code>[content]\nname = \"modSuperSpeed\"\nversion = \"1.0.0\"\nauthors = [ 'Yours truly' ]\ngame_version = \"4.04\"\n\n[dependencies]\ncontent0 = true # added by default\nmodMovement = { path = \"../MovementMod\" }\n</code></pre>"},{"location":"user-manual/project-system/#manifest-format","title":"Manifest format","text":"<p> Beware: format of the manifest may change in the future. Look out for breaking changes section in the changelog.</p> <p>Every WIDE project manifest is composed of following sections:</p> <ul> <li>content *:<ul> <li>name *</li> <li>description</li> <li>version *</li> <li>game_version *</li> <li>authors</li> <li>scripts_root</li> </ul> </li> <li>dependencies *</li> </ul> <p>* table/field is required</p> <p> If you have <code>Even Better TOML</code> extension installed it will provide you with auto-completion and hints when editing the manifest file.</p>"},{"location":"user-manual/project-system/#the-content-table","title":"The <code>[content]</code> table","text":"<p>Project metadata establishing basic information on how its content is named and structured.</p>"},{"location":"user-manual/project-system/#the-name-field","title":"The <code>name</code> field","text":"<p>Name of the project. It must begin with an ASCII letter or underscore and contain only alphanumerical ASCII characters or underscores. Spaces are not allowed.</p>"},{"location":"user-manual/project-system/#the-description-field","title":"The <code>description</code> field","text":"<p>Short description of the project. This field is optional.</p>"},{"location":"user-manual/project-system/#the-version-field","title":"The <code>version</code> field","text":"<p>Version of the project. It must follow semantic versioning format.</p>"},{"location":"user-manual/project-system/#the-game_version-field","title":"The <code>game_version</code> field","text":"<p>Version of Witcher 3 with which this project is compatible. The field does not require any specific format at the moment, but it may change in the future.</p>"},{"location":"user-manual/project-system/#the-authors-field","title":"The <code>authors</code> field","text":"<p>An array of authors of this project. Their form can be completely arbitrary. This field is optional.</p>"},{"location":"user-manual/project-system/#the-scripts_root-field","title":"The <code>scripts_root</code> field","text":"<p>Relative path to the scripts root directory. This field is optional and defaults to <code>\"./scripts\"</code>.</p>"},{"location":"user-manual/project-system/#the-dependencies-table","title":"The <code>[dependencies]</code> table","text":"<p>This table contains key-value pairs of dependency specifications. It may be left empty, but it's still required.</p> <p>Format of allowed values is as follows: </p> <pre><code>dependency_name = value\n</code></pre> <p>The key <code>dependency_name</code> specifies the name of another content. This name corresponds to the <code>name</code> field in the <code>[content]</code> table if the dependency is a project or parent directory name if it's a raw content.</p> <p><code>value</code> specifies where the content should be looked for. Accepted forms are:</p> <ul> <li> <p>boolean <code>true</code>/<code>false</code> - content should be searched for in repositories based upon its name. If the value is <code>false</code> the dependency will be ignored. Example: <pre><code>repoDependency = true\n</code></pre></p> </li> <li> <p>inline table <code>{ path = \"path/to/content\" }</code> - content should be looked for in a specific directory. The path can be absolute or relative to manifest's directory, but it is advised to use the latter. Name of the content pointed to by the path must also match with name of the dependency written before that. Example: <pre><code>pathDependency = { path = \"../dependencies/pathDependency\" }\n</code></pre></p> </li> </ul>"},{"location":"user-manual/project-system/#raw-content-directory","title":"Raw content directory","text":"<p>\"Raw content\" is the term by which WIDE refers to directories containing game files, among which are scripts residing in \"scripts\" directory. Examples of such directories in Witcher\u00a03's game directory include \"content0\", which contains all vanilla scripts, and any mods in the \"Mods\" directory that contain WitcherScript.</p> <p> In order for raw content directories to be found by WIDE you need to configure content repositories.</p> <p>Recognized folder patterns are:</p> <ol> <li> <p>\"scripts\" directly inside the folder (example: \"content0\") <pre><code>{content_name}/\n\u251c\u2500 scripts/\n   \u251c\u2500 **/*.ws\n</code></pre></p> </li> <li> <p>\"scripts\" inside an intermediary \"content\" directory (examples: script mod in the \"Mods\" directory) <pre><code>{content_name}/\n\u251c\u2500 content/\n   \u251c\u2500 scripts/\n      \u251c\u2500 **/*.ws\n</code></pre></p> </li> </ol> <p>Name of raw content is derived from the name of its root directory.</p> <p>Project directories can be thought of as an extension of a raw content directories, as alongside scripts they also includes the manifest.  Raw content is recognized by WIDE purely for user convenience to not force anyone to needlesly create manifest files for directories, whose identity can be recognized from the context of their placement in the file system (case in point, again, the \"content0\" directory).</p>"},{"location":"user-manual/project-system/#content-repositories","title":"Content repositories","text":"<p>\"Content repositories\" are directories that directly inside them contain raw or project content directories. Commonly used repositories are \"Witcher 3/content\" and \"Witcher 3/Mods\". Repositories can be configured via <code>witcherscript-ide.gameDirectory</code> and <code>witcherscript-ide.contentRepositories</code> settings in editor.</p>"},{"location":"user-manual/project-system/#vanilla-content-dependency","title":"Vanilla content dependency","text":"<p>When setting vanilla scripts as a dependency for your project make sure that the name of the content they are found in is called exactly \"content0\". WIDE distinguishes this way the vanilla content from any other modded content. If you configure it to be found in your game directory with <code>witcherscript-ide.gameDirectory</code> setting and don't modify it in any way, it should be valid without a need for any further actions. If you however store your vanilla scripts in a seperate folder make sure that either that folder is called \"content0\" or create a manifest for it with the following content inside it: <pre><code>[content]\nname = \"content0\"\n# version etc...\n\n[dependencies]\n# this table should be empty\n</code></pre></p>"}]}